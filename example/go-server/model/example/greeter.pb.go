// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/greeter.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	example/greeter.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name and how many greetings
// they want.
type HelloRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumGreetings uint32 `protobuf:"varint,2,opt,name=num_greetings,json=numGreetings" json:"num_greetings,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetNumGreetings() uint32 {
	if m != nil {
		return m.NumGreetings
	}
	return 0
}

// A response message containing a greeting
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "example.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "example.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MultiGreeter service

type MultiGreeterClient interface {
	// Sends multiple greetings
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (MultiGreeter_SayHelloClient, error)
}

type multiGreeterClient struct {
	cc *grpc.ClientConn
}

func NewMultiGreeterClient(cc *grpc.ClientConn) MultiGreeterClient {
	return &multiGreeterClient{cc}
}

func (c *multiGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (MultiGreeter_SayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MultiGreeter_serviceDesc.Streams[0], c.cc, "/example.MultiGreeter/sayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiGreeterSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultiGreeter_SayHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type multiGreeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *multiGreeterSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MultiGreeter service

type MultiGreeterServer interface {
	// Sends multiple greetings
	SayHello(*HelloRequest, MultiGreeter_SayHelloServer) error
}

func RegisterMultiGreeterServer(s *grpc.Server, srv MultiGreeterServer) {
	s.RegisterService(&_MultiGreeter_serviceDesc, srv)
}

func _MultiGreeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiGreeterServer).SayHello(m, &multiGreeterSayHelloServer{stream})
}

type MultiGreeter_SayHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type multiGreeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *multiGreeterSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var _MultiGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.MultiGreeter",
	HandlerType: (*MultiGreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sayHello",
			Handler:       _MultiGreeter_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example/greeter.proto",
}

func init() { proto.RegisterFile("example/greeter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x0a, 0xc2, 0x30,
	0x0c, 0x40, 0xad, 0x88, 0xd3, 0xb0, 0x5d, 0x22, 0x83, 0xe1, 0x69, 0x4c, 0x90, 0x9d, 0xa6, 0xe8,
	0xcd, 0x1f, 0x98, 0x08, 0x5e, 0xf6, 0x03, 0x52, 0x21, 0x8c, 0x41, 0xdb, 0xd5, 0xb5, 0x05, 0xf7,
	0xf7, 0x42, 0x5d, 0x41, 0xbc, 0x25, 0x0f, 0xf2, 0x78, 0x81, 0x94, 0xde, 0x5c, 0x6a, 0x41, 0x87,
	0x76, 0x20, 0xb2, 0x34, 0x54, 0x7a, 0xe8, 0x6d, 0x8f, 0xd1, 0x84, 0x8b, 0x1a, 0xe2, 0x2b, 0x09,
	0xd1, 0x37, 0xf4, 0x72, 0x64, 0x2c, 0x22, 0x2c, 0x14, 0x97, 0x94, 0xb1, 0x9c, 0x95, 0xeb, 0xc6,
	0xcf, 0xb8, 0x83, 0x44, 0x39, 0xf9, 0xf0, 0x86, 0x4e, 0xb5, 0x26, 0x9b, 0xe7, 0xac, 0x4c, 0x9a,
	0x58, 0x39, 0x59, 0x07, 0x56, 0xec, 0x01, 0x26, 0x91, 0x16, 0x23, 0x66, 0x10, 0x49, 0x32, 0x86,
	0xb7, 0xc1, 0x14, 0xd6, 0xd3, 0x0d, 0xe2, 0xbb, 0x13, 0xb6, 0xab, 0xbf, 0x3d, 0x78, 0x81, 0x95,
	0xe1, 0xa3, 0x3f, 0xc5, 0xb4, 0x9a, 0xb2, 0xaa, 0xdf, 0xa6, 0xed, 0xe6, 0x1f, 0x6b, 0x31, 0x16,
	0xb3, 0x23, 0x7b, 0x2e, 0xfd, 0x33, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xfd, 0x0d,
	0x0d, 0xe5, 0x00, 0x00, 0x00,
}
